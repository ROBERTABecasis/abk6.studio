let circles = [];
const numCircles = 45;
const circleRadius = 100;
let gravity;
let draggingCircle = null;
let canvas = null; // Variable para el canvas
let canvasActive = false; // Estado del canvas


const svgShapes = [
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50"><circle cx="25" cy="25" r="25" fill="#ff6347" /></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50"><rect width="50" height="50" fill="#4682b4" /></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50"><path d="M25 0 L50 50 H0 Z" fill="#32cd32"/></svg>',
];

document.addEventListener("DOMContentLoaded", () => {
    const toggleCheckbox = document.querySelector(".icon-toggle input.checkbox");

    if (!toggleCheckbox) {
        console.error("Checkbox not found! Verify your class name.");
        return;
    }

    // Evento para alternar la creación y destrucción del canvas
    toggleCheckbox.addEventListener("change", (event) => {
        if (event.target.checked) {
            createCanvasInstance(); // Crear el canvas
        } else {
            destroyCanvasInstance(); // Destruir el canvas
        }
    });
});

// Función para crear el canvas
function createCanvasInstance() {
    if (canvasActive) return; // No hacer nada si el canvas ya está activo

    canvas = createCanvas(windowWidth, windowHeight);
    canvas.position(0, 0);
    canvas.style("position", "fixed");
    canvas.style("z-index", "100");
    canvas.style("pointer-events", "none"); // Permitir clics a través del canvas

    gravity = createVector(0, 5);

    // Crear partículas iniciales
    circles = [];
    for (let i = 0; i < numCircles; i++) {
        let validPosition = false;
        let newCircle;

        while (!validPosition) {
            newCircle = new Circle(random(width), random(height / 2), circleRadius);
            validPosition = true;

            for (let circle of circles) {
                if (newCircle.checkCollision(circle)) {
                    validPosition = false;
                    break;
                }
            }
        }
        circles.push(newCircle);
    }

    canvasActive = true; // Actualizar el estado del canvas
}

// Función para destruir el canvas
function destroyCanvasInstance() {
    if (!canvasActive) return; // No hacer nada si el canvas no está activo

    canvas.remove(); // Eliminar el canvas
    canvas = null;

    circles = []; // Vaciar la lista de partículas
    canvasActive = false; // Actualizar el estado del canvas
}

// Configuración y lógica principal de p5.js
function setup() {
    // Inicialmente, no se crea el canvas hasta que se active el toggle
}

function draw() {
    if (!canvasActive) return; // Detener el loop si el canvas no está activo

    clear();

    for (let circle of circles) {
        if (circle !== draggingCircle) {
            circle.applyForce(gravity);
        }
        circle.update();
        circle.edges();
        circle.display();

        for (let other of circles) {
            if (circle !== other) {
                circle.checkCollision(other);
            }
        }
    }
}

function windowResized() {
    if (canvasActive) {
        resizeCanvas(windowWidth, windowHeight);
    }
}

function mousePressed() {
    if (!canvasActive) return;
    for (let circle of circles) {
        if (circle.contains(mouseX, mouseY)) {
            draggingCircle = circle;
            draggingCircle.vel.set(0);
            break;
        }
    }
}

function mouseDragged() {
    if (!canvasActive || !draggingCircle) return;
    let mouseVel = createVector(mouseX, mouseY).sub(draggingCircle.pos);
    draggingCircle.vel.set(mouseVel.x / 4, mouseVel.y / 5);
    draggingCircle.pos.set(mouseX, mouseY);
}

function mouseReleased() {
    if (!canvasActive) return;
    draggingCircle = null;
}

// Clase de partículas
class Circle {
    constructor(x, y, r) {
        this.pos = createVector(x, y);
        this.vel = createVector(0, 0);
        this.acc = createVector(0, 0);
        this.r = r;
    }

    applyForce(force) {
        let f = p5.Vector.div(force, this.r);
        this.acc.add(f);
    }

    update() {
        this.vel.add(this.acc);
        this.pos.add(this.vel);
        this.acc.mult(0);
    }

    edges() {
        if (this.pos.y + this.r >= height) {
            this.pos.y = height - this.r;
            this.vel.y *= -0.8; // Rebote vertical
            this.vel.x *= 0.8; // Fricción horizontal
        } else if (this.pos.y - this.r < 0) {
            this.pos.y = this.r;
            this.vel.y *= -0.8;
        }

        if (this.pos.x + this.r > width) {
            this.pos.x = width - this.r;
            this.vel.x *= -0.8;
        } else if (this.pos.x - this.r < 0) {
            this.pos.x = this.r;
            this.vel.x *= -0.8;
        }
    }

    display() {
        fill(255, 100, 100, 150);
        noStroke();
        ellipse(this.pos.x, this.pos.y, this.r * 2);
    }

    contains(x, y) {
        let d = dist(x, y, this.pos.x, this.pos.y);
        return d < this.r;
    }

    checkCollision(other) {
        let distance = dist(this.pos.x, this.pos.y, other.pos.x, other.pos.y);
        let minDist = this.r + other.r;

        if (distance < minDist) {
            let forceDir = p5.Vector.sub(this.pos, other.pos).normalize();
            let overlap = minDist - distance;

            this.pos.add(forceDir.copy().mult(overlap * 0.5));
            other.pos.sub(forceDir.copy().mult(overlap * 0.5));

            let relativeVelocity = p5.Vector.sub(this.vel, other.vel);
            let speed = relativeVelocity.dot(forceDir);

            if (speed < 0) {
                let impulse = forceDir.mult(speed * -0.5);
                this.vel.add(impulse);
                other.vel.sub(impulse);

                this.vel.mult(0.98);
                other.vel.mult(0.98);
            }
        }
    }
}
